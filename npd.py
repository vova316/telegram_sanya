from main import bot, dp
from aiogram.types import Message
from nkey import menu, sub_menu
from aiogram.dispatcher.filters import Command, Text
import sqlite3
import pyowm
import requests
from bs4 import BeautifulSoup as bs
import asyncio

owm = pyowm.OWM('d856015103ff24d29128b3bb243278bc')

db = sqlite3.connect('SanyaBot.db') #–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
sql = db.cursor()

sql.execute("""CREATE TABLE IF NOT EXISTS users(
	id TEXT,
	city TEXT
	)""")
db.commit()

sql.execute("""CREATE TABLE IF NOT EXISTS politic(
	id TEXT
	)""")
db.commit()

sql.execute("""CREATE TABLE IF NOT EXISTS games(
	id TEXT
	)""")
db.commit()

sql.execute("""CREATE TABLE IF NOT EXISTS space(
	id TEXT
	)""")
db.commit()

sql.execute("""CREATE TABLE IF NOT EXISTS datasubs(
	bdpol TEXT,
	bdgame TEXT,
	bdcos TEXT
	)""")
db.commit()

def citys(my_id, my_city):
	sql.execute(f"INSERT INTO users VALUES (?, ?)", (my_id, my_city))
	db.commit()

def new_sub(category, my_id):
	sql.execute(f"INSERT INTO {category} VALUES (?)", (my_id,))
	db.commit()

def delete_sub(category, my_id):
	sql.execute(f"DELETE FROM {category} WHERE id = '{my_id}'")
	db.commit()

#sql.execute("INSERT INTO datasubs VALUES (?, ?, ?)", ('', '', ''))
#db.commit()

URLpol = 'https://ria.ru/politics/'
URLgame = 'https://stopgame.ru/news'
URLcos = 'https://novosti-kosmonavtiki.ru/news/'
HEADERS = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0'}

def doing(table, status):
	sql.execute(f"UPDATE users SET " + table + "= " + status) # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	db.commit()	

@dp.message_handler(Command('start'))
async def welcome(message: Message):
	global my_id
	my_id = message.from_user["id"]
	await bot.send_message(chat_id=message.from_user.id, text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user["first_name"]}, –º–µ–Ω—è –∑–æ–≤—É—Ç –°–∞–Ω—è –∏ —è —É–º–µ—é —Ä–∞—Å—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ üòÑ', reply_markup=menu)

@dp.message_handler(Text('–ü–æ–º–æ—â—å üõ†'))
async def help(message: Message):
	helper = "‚Ä¢–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ - /start" + "\n"
	helper += "‚Ä¢–î–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ - /help" + "\n"
	helper += "‚Ä¢–î–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É" + "\n"
	helper += "‚Ä¢–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–≥–æ–¥–∞'" + "\n"
	helper += "‚Ä¢–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /politic" + "\n"
	helper += "‚Ä¢–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /games" + "\n"
	helper += "‚Ä¢–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ—Å–º–æ—Å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /space" + "\n"
	helper += "‚Ä¢–ß—Ç–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥ –≤–≤–µ–¥–∏—Ç–µ: upd [–≤–∞—à –≥–æ—Ä–æ–¥]" + "\n\n"
	helper += "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: " + "\n"
	helper += "‚Ä¢–ë–æ—Ç –±—ã–ª –¥–æ–≤–µ–¥–µ–Ω –¥–æ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏" + "\n"
	helper += "SanyaBot v: 2.0.0"
	await bot.send_message(chat_id=message.from_user.id, text=helper)

@dp.message_handler(Text('–ü–æ–¥–ø–∏—Å–∫–∏ ‚úâÔ∏è'))
async def settings(message: Message):
	await bot.send_message(chat_id=message.from_user.id, text="–ü–æ–¥–ø–∏—Å–∫–∏:", reply_markup=sub_menu)


@dp.message_handler(Text('–ü–æ–ª–∏—Ç–∏–∫–∞ üßæ'))
async def politic(message: Message):
	my_id = str(message.from_user["id"])
	ident = []
	subscribers = sql.execute("SELECT id FROM politic").fetchall()
	for s in subscribers:
		s = str(s)
		s = s[2:-3]
		ident.append(s)
	
	if my_id in ident:
		delete_sub("politic", my_id)
		await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
	else:
		new_sub("politic", my_id)
		await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
		
@dp.message_handler(Text('–ò–≥—Ä—ã üéÆ'))
async def games(message: Message):
	my_id = str(message.from_user["id"])
	ident = []
	subscribers = sql.execute("SELECT id FROM games").fetchall()
	for s in subscribers:
		s = str(s)
		s = s[2:-3]
		ident.append(s)
	if my_id in ident:
		delete_sub("games", my_id)
		await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
	else:
		new_sub("games", my_id)
		await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

@dp.message_handler(Text('–ö–æ—Å–º–æ—Å üöÄ'))
async def space(message: Message):
	my_id = str(message.from_user["id"])
	ident = []
	subscribers = sql.execute("SELECT id FROM space").fetchall()
	for s in subscribers:
		s = str(s)
		s = s[2:-3]
		ident.append(s)
	if my_id in ident:
		delete_sub("space", my_id)
		await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
	else:
		new_sub("space", my_id)
		await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

@dp.message_handler(Text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
async def exit(message: Message):
	await bot.send_message(chat_id=message.from_user.id, text="–ú–µ–Ω—é:", reply_markup=menu)


@dp.message_handler(Text('–ü–æ–≥–æ–¥–∞ üå§'))
async def weather(message: Message):
	my_id = message.from_user["id"]
	sql.execute(f"SELECT city FROM users WHERE id = '{my_id}'")
	if sql.fetchone() is None:
		place = '–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.'
	else:
		for val in sql.execute(f"SELECT city FROM users WHERE id = '{my_id}'"):
			place = val[0]
			mgr = owm.weather_manager()
			observation = mgr.weather_at_place(place)
			w = observation.weather
			temp = w.temperature('celsius')["temp"]
			wind = w.wind()["speed"]
			hum = w.humidity

			st = w.status

			if st == 'Clear':
				st = '–Ø—Å–Ω–æ'
			elif st == 'Clouds':
				st = '–û–±–ª–æ—á–Ω–æ'
			elif st == 'Snow':
				st = '–°–Ω–µ–∂–Ω–æ'

			ans = "–í –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å: " + st + "\n" 
			ans += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(temp) + "¬∞C" + "\n"  
			ans += "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: " + str(wind) + "–º/—Å" + "\n" 
			ans += "–í–ª–∞–∂–Ω–æ—Å—Ç—å: " + str(hum) + "%" "\n\n"

			if temp < 10:
				ans += "–°—Ç–æ–∏—Ç –æ–¥–µ—Ç—å –∫—É—Ä—Ç–∫—É"
			elif temp < 20:
				ans += "–ù–∞ —É–ª–∏—Ü–µ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"
			else:
				ans += "–ü–æ–≥–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è, –æ–¥–µ–∂–¥–∞ –Ω–∞ –≤–∞—à –≤–∫—É—Å"
		await message.answer(ans)

@dp.message_handler(Command('city'))
async def city(message: Message):
	my_id = message.from_user["id"]
	sql.execute(f"SELECT city FROM users WHERE id = '{my_id}'")
	if sql.fetchone() is None:
		place = '–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.'
	else:
		for val in sql.execute(f"SELECT city FROM users WHERE id = '{my_id}'"):
			place = val[0]
	await bot.send_message(chat_id=message.from_user.id, text=f'–¢–≤–æ–π –≥–æ—Ä–æ–¥: {place}')

@dp.message_handler(text_contains='upd')
async def new(message: Message):
	my_city = message.text[4:]
	my_id = message.from_user["id"]
	citys(my_id, my_city)
	await bot.send_message(chat_id=message.from_user.id, text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!')

async def scheduled(wait_for):
	while True:
		await asyncio.sleep(wait_for)
		response = requests.get(URLgame, headers = HEADERS)
		soup = bs(response.content, 'html.parser')
		items = soup.findAll('div', class_ = 'caption caption-bold') 
		comps = []

		for item in items:
			comps.append({'title': item.find('a').get_text(strip = True),
				'link': item.find('a').get('href')})

			d = comps
			d = d[:-19]
		d = str(d)
		de = d[-18:-3]
		ugame = "https://stopgame.ru"
		de = ugame + de

		sql.execute("SELECT bdgame FROM datasubs")
		nde = sql.fetchone()
		nde = str(nde)
		nde = nde[2:-3]
		if de != nde:
			sql.execute(f"UPDATE datasubs SET bdgame = '{de}'") # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
			db.commit()
			subscribers = sql.execute("SELECT id FROM games").fetchall()
			for s in subscribers:
				s = str(s)
				s = s[2:-3]
				await bot.send_message(chat_id=s, text=de, disable_notification = True)

		response = requests.get(URLpol, headers = HEADERS)
		soup = bs(response.content, 'html.parser')
		items = soup.findAll('div', class_ = 'list-item')
		comps = []

		for item in items:
			comps.append({'link': item.find('a', class_ = 'list-item__title color-font-hover-only').get('href')})
			e = comps
			e = e[:-19]
		e = str(e)
		fed = e[11:-3]

		ndf = sql.execute("SELECT bdpol FROM datasubs").fetchone()
		ndf = str(ndf)
		ndf = ndf[2:-3]

		if fed != ndf:
			sql.execute(f"UPDATE datasubs SET bdpol = '{fed}'")
			 # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
			db.commit()
			subscribers = sql.execute("SELECT id FROM politic").fetchall()
			for s in subscribers:
				s = str(s)
				s = s[2:-3]
				await bot.send_message(chat_id=s, text=fed, disable_notification = True)

		response = requests.get(URLcos, headers = HEADERS)
		soup = bs(response.content, 'html.parser')
		items = soup.findAll('div', class_ = 'row news-item')
		comps = []

		for item in items:
			comps.append({'title': item.find('a', class_ = 'news-info__top-title').get_text(strip = True),
				'link': item.find('a', class_ = 'news-info__top-title').get('href')})
			f = comps
			f = f[:-19]
		f = str(f)
		dg = f[-15:-3]
		ucos = "https://novosti-kosmonavtiki.ru"
		dg = ucos + dg

		sql.execute("SELECT bdcos FROM datasubs")
		ndg = sql.fetchone()
		ndg = str(ndg)
		ndg = ndg[2:-3]

		if dg != ndg:
			sql.execute(f"UPDATE datasubs SET bdcos = '{dg}'") # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
			db.commit()
			subscribers = sql.execute("SELECT id FROM space").fetchall()
			for s in subscribers:
				s = str(s)
				s = s[2:-3]
				await bot.send_message(chat_id=s, text=dg, disable_notification = True)
